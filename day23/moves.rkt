#lang racket
(provide moves-from is-occupied)
#|
  0   1   2   3   4   5   6   7   8   9  10
         11      13      15      17
         12      14      16      18
|#
  
(define (moves-from-14)
  '((14 13 4 3 2 11 12)
    (14 13 4 3 2 11)
    (14 13)
    (14 13 4 5 6 15 16)
    (14 13 4 5 6 15)
    (14 13 4 5 6 7 8 17 18)
    (14 13 4 5 6 7 8 17)
    (14 13 4 3 2 1 0)
    (14 13 4 3 2 1)
    (14 13 4 3)
    (14 13 4 5)
    (14 13 4 5 6 7)
    (14 13 4 5 6 7 8 9)
    (14 13 4 5 6 7 8 9 10)))

(define (moves-from-13)
  '((12 11 2 3 4)
    (11 2 3 4)
    (14)
    (16 15 6 5 4)
    (15 6 5 4)
    (18 17 8 7 6 5 4)
    (17 8 7 6 5 4)
    (0 1 2 3 4)
    (1 2 3 4)
    (3 4)
    (5 4)
    (7 6 5 4)
    (9 8 7 6 5 4)
    (10 9 8 7 6 5 4)))

(define (moves-from-12)
  '((11)
    (14 13 4 3 2 11)
    (13 4 3 2 11)
    (16 15 6 5 4 3 2 11)
    (15 6 5 4 3 2 11)
    (18 17 8 7 6 5 4 3 2 11)
    (17 8 7 6 5 4 3 2 11)
    (0 1 2 11)
    (1 2 11)
    (3 2 11)
    (5 4 3 2 11)
    (7 6 5 4 3 2 11)
    (9 8 7 6 5 4 3 2 11)
    (10 9 8 7 6 5 4 3 2 11)))

(define (moves-from-11)
  '((12)
    (14 13 4 3 2)
    (13 4 3 2)
    (16 15 6 5 4 3 2)
    (15 6 5 4 3 2)
    (18 17 8 7 6 5 4 3 2)
    (17 8 7 6 5 4 3 2)
    (0 1 2)
    (1 2)
    (3 2)
    (5 4 3 2)
    (7 6 5 4 3 2)
    (9 8 7 6 5 4 3 2)
    (10 9 8 7 6 5 4 3 2)))

(define (moves-from-10)
  '((12 11 2 3 4 5 6 7 8 9)
    (11 2 3 4 5 6 7 8 9)
    (14 13 4 5 6 7 8 9)
    (13 4 5 6 7 8 9)
    (16 15 6 7 8 9)
    (15 6 7 8 9)
    (18 17 8 9)
    (17 8 9)
    (0 1 2 3 4 5 6 7 8 9)
    (1 2 3 4 5 6 7 8 9)
    (3 4 5 6 7 8 9)
    (5 6 7 8 9)
    (7 8 9)
    (9)))

(define (moves-from-9)
  '((12 11 2 3 4 5 6 7 8)
    (11 2 3 4 5 6 7 8)
    (14 13 4 5 6 7 8)
    (13 4 5 6 7 8)
    (16 15 6 7 8)
    (15 6 7 8)
    (18 17 8)
    (17 8)
    (0 1 2 3 4 5 6 7 8)
    (1 2 3 4 5 6 7 8)
    (3 4 5 6 7 8)
    (5 6 7 8)
    (7 8)
    (10)))

(define (moves-from-7)
  '((12 11 2 3 4 5 6)
    (11 2 3 4 5 6)
    (14 13 4 5 6)
    (13 4 5 6)
    (16 15 6)
    (15 6)
    (18 17 8)
    (17 8)
    (0 1 2 3 4 5 6)
    (1 2 3 4 5 6)
    (3 4 5 6)
    (5 6)
    (9 8)
    (10 9 8)))

(define (moves-from-5)
  '((12 11 2 3 4)
    (11 2 3 4)
    (14 13 4)
    (13 4)
    (16 15 6)
    (15 6)
    (18 17 8 7 6)
    (17 8 7 6)
    (0 1 2 3 4)
    (1 2 3 4)
    (3 4)
    (7 6)
    (9 8 7 6)
    (10 9 8 7 6)))

(define (moves-from-3)
  '((12 11 2)
    (11 2)
    (14 13 4)
    (13 4)
    (16 15 6 5 4)
    (15 6 5 4)
    (18 17 8 7 6 5 4)
    (17 8 7 6 5 4)
    (0 1 2)
    (1 2)
    (5 4)
    (7 6 5 4)
    (9 8 7 6 5 4)
    (10 9 8 7 6 5 4)
    ))

(define (moves-from-1)
  '((12 11 2)
    (11 2)
    (14 13 4 3 2)
    (13 4 3 2)
    (16 15 6 5 4 3 2)
    (15 6 5 4 3 2)
    (18 17 8 7 6 5 4 3 2)
    (17 8 7 6 5 4 3 2)
    (0)
    (3 2)
    (5 4 3 2)
    (7 6 5 4 3 2)
    (9 8 7 6 5 4 3 2)
    (10 9 8 7 6 5 4 3 2)))

(define (moves-from-0)
  '((12 11 2 1)
    (11 2 1)
    (14 13 4 3 2 1)
    (13 4 3 2 1)      
    (16 15 6 5 4 3 2 1)
    (15 6 5 4 3 2 1)
    (18 17 8 7 6 5 4 3 2 1)
    (17 8 7 6 5 4 3 2 1)
    (1)
    (3 2 1)
    (5 4 3 2 1)
    (7 6 5 4 3 2 1)
    (9 8 7 6 5 4 3 2 1)
    (10 9 8 7 6 5 4 3 2 1)))

(define (moves-from n)
  (case n
    [(0) (moves-from-0)]
    [(1) (moves-from-1)]
    [(2) '()]
    [(3) (moves-from-3)]
    [(4) '()]
    [(5) (moves-from-5)]
    [(6) '()]
    [(7) (moves-from-7)]
    [(8) '()]
    [(9) (moves-from-9)]
    [(10) (moves-from-10)]
    [(11) (moves-from-11)]
    [(12) (moves-from-12)]
    [(13) (moves-from-13)]
    [(14) (moves-from-14)]))

;; #t if state is occupied at index
;; #f if state is empty at index
(define (is-occupied state index)
  (not (equal? (vector-ref state index) ".")))
  
  